//--------------------------------------------------------------------------------
// Code generated by jFuzzyLogic
// jFuzzyLogic Version : JFuzzyLogic 3.3 (build 2015-04-09), by Pablo Cingolani 
// jFuzzyLogic creted by Pablo Cingolani
//--------------------------------------------------------------------------------

#include <iostream>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

double ruleAccumulationMethod_max(double defuzzifierValue, double valueToAggregate)	{ return ( defuzzifierValue > valueToAggregate ? defuzzifierValue : valueToAggregate ); }

double ruleActivationMethod_min(double degreeOfSupport, double membership)	{ return (degreeOfSupport < membership ? degreeOfSupport : membership); }

double ruleConnectionMethod_and(double antecedent1, double antecedent2)	{ return (antecedent1 < antecedent2 ? antecedent1 : antecedent2); }

class FunctionBlock_car2 {

	public: 
	// VAR_INPUT
	double droga;
	double predkosc;

	// VAR_OUTPUT
	double zmiana;

	private: 
	// FUZZIFY droga
	double droga_b_kortka;
	double droga_dluga;
	double droga_krotka;
	double droga_mala;
	double droga_srednia;

	// FUZZIFY predkosc
	double predkosc_duza;
	double predkosc_mala;
	double predkosc_srednia;


	// DEFUZZIFY zmiana
	double defuzzify_zmiana[1000];


	public:
	FunctionBlock_car2();
	void calc();
	void print();

	private:
	void defuzzify();
	void fuzzify();
	void reset();
	double membership_droga_b_kortka(double x);
	double membership_droga_dluga(double x);
	double membership_droga_krotka(double x);
	double membership_droga_mala(double x);
	double membership_droga_srednia(double x);
	double membership_predkosc_duza(double x);
	double membership_predkosc_mala(double x);
	double membership_predkosc_srednia(double x);
	double membership_zmiana_Mzredukuj(double x);
	double membership_zmiana_Mzwieksz(double x);
	double membership_zmiana_utrzymaj(double x);
	double membership_zmiana_zredukuj(double x);
	double membership_zmiana_zwieksz(double x);
	void calc_No1();

};

// Constructor
FunctionBlock_car2::FunctionBlock_car2() {
	zmiana = 0.0;
	reset();
}

// Calculate function block
void FunctionBlock_car2::calc() {
	reset();
	fuzzify();
	calc_No1();
	defuzzify();
}

// RULEBLOCK No1
void FunctionBlock_car2::calc_No1() {
	// RULE 1 : IF (droga IS krotka) AND (predkosc IS mala) THEN zmiana IS Mzredukuj;
	double degreeOfSupport_1 = 1.0 * ( ruleConnectionMethod_and(droga_krotka , predkosc_mala) );
	if( degreeOfSupport_1 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_zredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_1 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 2 : IF (droga IS krotka) AND (predkosc IS srednia) THEN zmiana IS Mzredukuj;
	double degreeOfSupport_2 = 1.0 * ( ruleConnectionMethod_and(droga_krotka , predkosc_srednia) );
	if( degreeOfSupport_2 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_2 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 3 : IF (droga IS krotka) AND (predkosc IS duza) THEN zmiana IS Mzredukuj;
	double degreeOfSupport_3 = 1.0 * ( ruleConnectionMethod_and(droga_krotka , predkosc_duza) );
	if( degreeOfSupport_3 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_Mzredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_3 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 4 : IF (droga IS mala) AND (predkosc IS mala) THEN zmiana IS zredukuj;
	double degreeOfSupport_4 = 1.0 * ( ruleConnectionMethod_and(droga_mala , predkosc_mala) );
	if( degreeOfSupport_4 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_zwieksz(x);
			double y = ruleActivationMethod_min( degreeOfSupport_4 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 5 : IF (droga IS mala) AND (predkosc IS srednia) THEN zmiana IS zredukuj;
	double degreeOfSupport_5 = 1.0 * ( ruleConnectionMethod_and(droga_mala , predkosc_srednia) );
	if( degreeOfSupport_5 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_5 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 6 : IF (droga IS mala) AND (predkosc IS duza) THEN zmiana IS Mzredukuj;
	double degreeOfSupport_6 = 1.0 * ( ruleConnectionMethod_and(droga_mala , predkosc_duza) );
	if( degreeOfSupport_6 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_zredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_6 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 7 : IF (droga IS srednia) AND (predkosc IS mala) THEN zmiana IS utrzymaj;
	double degreeOfSupport_7 = 1.0 * ( ruleConnectionMethod_and(droga_srednia , predkosc_mala) );
	if( degreeOfSupport_7 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_7 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 8 : IF (droga IS srednia) AND (predkosc IS srednia) THEN zmiana IS zredukuj;
	double degreeOfSupport_8 = 1.0 * ( ruleConnectionMethod_and(droga_srednia , predkosc_srednia) );
	if( degreeOfSupport_8 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_8 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 9 : IF (droga IS srednia) AND (predkosc IS duza) THEN zmiana IS zredukuj;
	double degreeOfSupport_9 = 1.0 * ( ruleConnectionMethod_and(droga_srednia , predkosc_duza) );
	if( degreeOfSupport_9 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_9 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 10 : IF (droga IS dluga) AND (predkosc IS mala) THEN zmiana IS Mzwieksz;
	double degreeOfSupport_10 = 1.0 * ( ruleConnectionMethod_and(droga_dluga , predkosc_mala) );
	if( degreeOfSupport_10 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_Mzwieksz(x);
			double y = ruleActivationMethod_min( degreeOfSupport_10 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 11 : IF (droga IS dluga) AND (predkosc IS srednia) THEN zmiana IS zwieksz;
	double degreeOfSupport_11 = 1.0 * ( ruleConnectionMethod_and(droga_dluga , predkosc_srednia) );
	if( degreeOfSupport_11 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_zwieksz(x);
			double y = ruleActivationMethod_min( degreeOfSupport_11 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 12 : IF (droga IS dluga) AND (predkosc IS duza) THEN zmiana IS utrzymaj;
	double degreeOfSupport_12 = 1.0 * ( ruleConnectionMethod_and(droga_dluga , predkosc_duza) );
	if( degreeOfSupport_12 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_utrzymaj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_12 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 13 : IF (droga IS b_kortka) AND (predkosc IS mala) THEN zmiana IS utrzymaj;
	double degreeOfSupport_13 = 1.0 * ( ruleConnectionMethod_and(droga_b_kortka , predkosc_mala) );
	if( degreeOfSupport_13 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_zredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_13 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 14 : IF (droga IS b_kortka) AND (predkosc IS srednia) THEN zmiana IS utrzymaj;
	double degreeOfSupport_14 = 1.0 * ( ruleConnectionMethod_and(droga_b_kortka , predkosc_srednia) );
	if( degreeOfSupport_14 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_Mzredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_14 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

	// RULE 15 : IF (droga IS b_kortka) AND (predkosc IS duza) THEN zmiana IS utrzymaj;
	double degreeOfSupport_15 = 1.0 * ( ruleConnectionMethod_and(droga_b_kortka , predkosc_duza) );
	if( degreeOfSupport_15 > 0 ) {
		for (int i = 0 ; i < 1000 ; i++ ) {
			double x = -34.0 + i * 0.078;
			double membership = membership_zmiana_Mzredukuj(x);
			double y = ruleActivationMethod_min( degreeOfSupport_15 , membership );
			defuzzify_zmiana[i] += ruleAccumulationMethod_max( defuzzify_zmiana[i], y );
		}
	}

}

// Defuzzify 
void FunctionBlock_car2::defuzzify() {
	double sum_zmiana = 0.0;
	double wsum_zmiana = 0.0;
	for (int i = 0; i < 1000 ; i++ ) {
		double x = -34.0 + i * 0.078;
		sum_zmiana += defuzzify_zmiana[i];
		wsum_zmiana += x * defuzzify_zmiana[i];
	}
	zmiana = wsum_zmiana / sum_zmiana;
}

// Fuzzify all variables
void FunctionBlock_car2::fuzzify() {
	droga_b_kortka = membership_droga_b_kortka(droga);
	droga_dluga = membership_droga_dluga(droga);
	droga_krotka = membership_droga_krotka(droga);
	droga_mala = membership_droga_mala(droga);
	droga_srednia = membership_droga_srednia(droga);
	predkosc_duza = membership_predkosc_duza(predkosc);
	predkosc_mala = membership_predkosc_mala(predkosc);
	predkosc_srednia = membership_predkosc_srednia(predkosc);
}

// Membership functions 
double FunctionBlock_car2::membership_droga_b_kortka(double x) {
	if ( x <= 0.0 )	return 1.0;
	if ( x > 14.0 )	return 0.0;
	if ( x <= 8.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 8.0 - 0.0 ) );
	if ( x <= 14.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 8.0 ) / ( 14.0 - 8.0 ) );
}

double FunctionBlock_car2::membership_droga_dluga(double x) {
	if ( x <= 380.0 )	return 0.0;
	if ( x > 1000.0 )	return 1.0;
	if ( x <= 500.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 380.0 ) / ( 500.0 - 380.0 ) );
	if ( x <= 1000.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 500.0 ) / ( 1000.0 - 500.0 ) );
}

double FunctionBlock_car2::membership_droga_krotka(double x) {
	if ( x <= 10.0 )	return 0.0;
	if ( x > 50.0 )	return 0.0;
	if ( x <= 20.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 10.0 ) / ( 20.0 - 10.0 ) );
	if ( x <= 30.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 20.0 ) / ( 30.0 - 20.0 ) );
	if ( x <= 50.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 30.0 ) / ( 50.0 - 30.0 ) );
}

double FunctionBlock_car2::membership_droga_mala(double x) {
	if ( x <= 45.0 )	return 0.0;
	if ( x > 150.0 )	return 0.0;
	if ( x <= 70.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 45.0 ) / ( 70.0 - 45.0 ) );
	if ( x <= 100.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 70.0 ) / ( 100.0 - 70.0 ) );
	if ( x <= 150.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 100.0 ) / ( 150.0 - 100.0 ) );
}

double FunctionBlock_car2::membership_droga_srednia(double x) {
	if ( x <= 125.0 )	return 0.0;
	if ( x > 425.0 )	return 0.0;
	if ( x <= 180.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 125.0 ) / ( 180.0 - 125.0 ) );
	if ( x <= 350.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 180.0 ) / ( 350.0 - 180.0 ) );
	if ( x <= 425.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 350.0 ) / ( 425.0 - 350.0 ) );
}

double FunctionBlock_car2::membership_predkosc_duza(double x) {
	if ( x <= 19.0 )	return 0.0;
	if ( x > 27.0 )	return 1.0;
	if ( x <= 23.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 19.0 ) / ( 23.0 - 19.0 ) );
	if ( x <= 27.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 23.0 ) / ( 27.0 - 23.0 ) );
}

double FunctionBlock_car2::membership_predkosc_mala(double x) {
	if ( x <= 0.0 )	return 1.0;
	if ( x > 9.0 )	return 0.0;
	if ( x <= 4.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 0.0 ) / ( 4.0 - 0.0 ) );
	if ( x <= 9.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 4.0 ) / ( 9.0 - 4.0 ) );
}

double FunctionBlock_car2::membership_predkosc_srednia(double x) {
	if ( x <= 7.0 )	return 0.0;
	if ( x > 20.0 )	return 0.0;
	if ( x <= 12.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 7.0 ) / ( 12.0 - 7.0 ) );
	if ( x <= 16.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 12.0 ) / ( 16.0 - 12.0 ) );
	if ( x <= 20.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 16.0 ) / ( 20.0 - 16.0 ) );
}

double FunctionBlock_car2::membership_zmiana_Mzredukuj(double x) {
	if ( x <= -34.0 )	return 1.0;
	if ( x > -14.0 )	return 0.0;
	if ( x <= -24.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - -34.0 ) / ( -24.0 - -34.0 ) );
	if ( x <= -14.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -24.0 ) / ( -14.0 - -24.0 ) );
}

double FunctionBlock_car2::membership_zmiana_Mzwieksz(double x) {
	if ( x <= 14.0 )	return 0.0;
	if ( x > 34.0 )	return 1.0;
	if ( x <= 24.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 14.0 ) / ( 24.0 - 14.0 ) );
	if ( x <= 34.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 24.0 ) / ( 34.0 - 24.0 ) );
}

double FunctionBlock_car2::membership_zmiana_utrzymaj(double x) {
	if ( x <= -7.0 )	return 0.0;
	if ( x > 7.0 )	return 0.0;
	if ( x <= 0.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - -7.0 ) / ( 0.0 - -7.0 ) );
	if ( x <= 7.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 0.0 ) / ( 7.0 - 0.0 ) );
}

double FunctionBlock_car2::membership_zmiana_zredukuj(double x) {
	if ( x <= -20.0 )	return 0.0;
	if ( x > 0.0 )	return 0.0;
	if ( x <= -14.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - -20.0 ) / ( -14.0 - -20.0 ) );
	if ( x <= -9.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - -14.0 ) / ( -9.0 - -14.0 ) );
	if ( x <= 0.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - -9.0 ) / ( 0.0 - -9.0 ) );
}

double FunctionBlock_car2::membership_zmiana_zwieksz(double x) {
	if ( x <= 0.0 )	return 0.0;
	if ( x > 20.0 )	return 0.0;
	if ( x <= 9.0 )	return 0.0 + ( 1.0 - 0.0 ) * ( ( x - 0.0 ) / ( 9.0 - 0.0 ) );
	if ( x <= 14.0 )	return 1.0 + ( 1.0 - 1.0 ) * ( ( x - 9.0 ) / ( 14.0 - 9.0 ) );
	if ( x <= 20.0 )	return 1.0 + ( 0.0 - 1.0 ) * ( ( x - 14.0 ) / ( 20.0 - 14.0 ) );
}


// Print 
void FunctionBlock_car2::print() {
	printf("Function block car2:\n");
	printf("	Input  %20s : %f\n", "droga" , droga);
	printf("	       %20s : %f\n", "droga_b_kortka" , droga_b_kortka);
	printf("	       %20s : %f\n", "droga_dluga" , droga_dluga);
	printf("	       %20s : %f\n", "droga_krotka" , droga_krotka);
	printf("	       %20s : %f\n", "droga_mala" , droga_mala);
	printf("	       %20s : %f\n", "droga_srednia" , droga_srednia);
	printf("	Input  %20s : %f\n", "predkosc" , predkosc);
	printf("	       %20s : %f\n", "predkosc_duza" , predkosc_duza);
	printf("	       %20s : %f\n", "predkosc_mala" , predkosc_mala);
	printf("	       %20s : %f\n", "predkosc_srednia" , predkosc_srednia);
	printf("	Output %20s : %f\n", "zmiana" , zmiana);
}







// Reset output
void FunctionBlock_car2::reset() {
	for( int i=0 ; i < 1000 ; i++ )	{ defuzzify_zmiana[i] = 0.0; }
}

int main(int argc, char *argv[]) {
    // Create function blocks
    FunctionBlock_car2 car1;

    car1.droga = 1000;
    car1.predkosc = 0;

	float temp;
    do {
        car1.calc();
        //car1.print();  // Wywietl stan w ka¿dej iteracji
		cout<<car1.droga<<" "<<car1.predkosc<<endl;
		cout<<car1.zmiana<<endl;

		temp=car1.droga;
        car1.droga = car1.droga - car1.predkosc;
		car1.predkosc = car1.predkosc + car1.zmiana;
		

    } while (car1.predkosc > 0 && car1.droga > 0);  // Poprawiono warunek pêtli
    cout<<"Do celu zostalo "<<temp<<endl;

    return 0;
}


